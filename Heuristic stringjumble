import java.util.ArrayList;

import rp13.search.problem.puzzle.EightPuzzle;


public class HeuristicStringJumble {

	private StringJumble goalState; 
	private StringJumble that; 
	private int hCost = 0;
	private int gCost = 1; //consider uniform cost
	private int fCost = 0;
	private ArrayList<Integer> positionsToSwap; 
	//positions which are wrong, to be explored (not touching those already in correct order)
	
	public HeuristicStringJumble(StringJumble _that, StringJumble _goalState) {
		this.that = _that;
		this.goalState = _goalState;
	}

	public int getFCost(){
		return getHCost() + getGCost();	
	}
	
	public int getHCost() { //consider hamming distance
		char[] array =  that.getCurrentArray();
		char[] goalArray = goalState.getCurrentArray();
		for (int i = 0; i < array.length; i++) {
			if (array[i] != goalArray[i]) {
				positionsToSwap.add(i);
				hCost++;
			}
		}
		return hCost;
	}

	public int getGCost(){
		return gCost; //consider uniform cost to make swaps		
	}
	
	public ArrayList<Integer> getPositionsToSwap() {
		return positionsToSwap;
	}
	
}
