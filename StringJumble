
import java.util.Random;
import java.util.Scanner;

public class StringJumble {

	private static String initialString;
	private int wordLength;
	private char[] currentState;
	private MovePair move;

	public StringJumble(String initialString) {
		super();
		this.initialString = initialString;
		this.wordLength = initialString.length();
		this.currentState = new char[wordLength];
		for (int i = 0; i < initialString.length(); i++) {
			currentState[i] = initialString.charAt(i);
		}
	}

	public static StringJumble randomString(int _moves) {
		StringJumble puzzle = new StringJumble(initialString);
		for (int i = 0; i < _moves; i++) {
			puzzle.randomMove(); // create random move
		}

		return puzzle;
	}

	public StringJumble randomStringJumble(){
		Random RANDOM = new Random();
		int random = RANDOM.nextInt(10);
		return randomString(random);
	}
	
	// swap 2 random letters
	public void randomMove() {
		Random RANDOM_1 = new Random();
		Random RANDOM_2 = new Random();
		while (RANDOM_1.equals(RANDOM_2))
			// ensures generating 2 different numbers
			RANDOM_2 = new Random();
		int r1 = RANDOM_1.nextInt(currentState.length); // generate random
														// number between 0 and
														// wordLength
		int r2 = RANDOM_2.nextInt(currentState.length); // generate random
														// number between 0 and
														// wordLength
		makeMove(r1, r2);
	}

	public boolean isValidMove(int move1, int move2) {
		if (move1 < wordLength && move2 < wordLength)
			return true;
		else
			return false;
	}

	// swap 2 letters
	public void makeMove(int move1, int move2) {
		if (isValidMove(move1, move2)) {
			char temp = currentState[move1];
			currentState[move1] = currentState[move2];
			currentState[move2] = temp;

		}
		
		//else (not isValidMove) do nothing --> same state
		
		// move1 and move2 save as a MovePair
		move = new MovePair(move1, move2);

	}
	
	public MovePair getMove() {
		return move;
	}

	public String getCurrentString() {
		return initialString;
	}

	public char[] getCurrentArray() {
		return currentState;
	}
	
	public boolean equals(StringJumble wordCompare) {
		for(int i = 0; i < wordLength; i++){
			if(currentState[i] != wordCompare.getCurrentArray()[i]){
				return false;
			}
		}
		
		return true;
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < currentState.length; i++) {
			sb.append(currentState[i]);
		}

		String current = sb.toString();

		return current;

	}

	public static void main(String[] args) {
		StringJumble myClass = new StringJumble("Hello");
		System.out.println(myClass);
		System.out.println(myClass.randomStringJumble());
		myClass.makeMove(1, 3);
		System.out.println(myClass);
		System.out.println(myClass.getMove());

	}

}
