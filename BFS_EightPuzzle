import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

import rp13.search.problem.puzzle.EightPuzzle;
import rp13.search.problem.puzzle.EightPuzzle.PuzzleMove;
import rp13.search.util.ActionStatePair;

public class BFS_EightPuzzle {

	// declare goal state
	EightPuzzle goalState = EightPuzzle.orderedEightPuzzle();

	// declare queue agenda
	Queue<EightPuzzle> agenda = new LinkedList<EightPuzzle>();

	// declare explored states
	ExploredStates<EightPuzzle> explored = new ExploredStates<EightPuzzle>();

	// declare path
	ArrayList<ActionStatePair<EightPuzzle, ActionStatePair<PuzzleMove, EightPuzzle>>> linkToParent = new ArrayList<ActionStatePair<EightPuzzle, ActionStatePair<PuzzleMove, EightPuzzle>>>();

	// path: parent, (action, state)
	ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>> path = new ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>>();

	public void search(EightPuzzle currentState) {
		// declare successor function
		EightPuzzleSuccessorFunction function = new EightPuzzleSuccessorFunction();

		agenda.add(currentState);
		while (true) {
			EightPuzzle state = agenda.remove();
			// System.out.println(state);
			explored.add(state);
			if (state.equals(goalState)) {
				break;
			} else {
				ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>> successors = new ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>>();

				// get successors
				function.getSuccessors(state, successors);

				// add successors to agenda
				for (ActionStatePair<PuzzleMove, EightPuzzle> actionStatePair : successors) {
					if (!explored.contains(actionStatePair.getState())
							&& !agenda.contains(actionStatePair.getState())) {
						agenda.add(actionStatePair.getState());
						ActionStatePair<EightPuzzle, ActionStatePair<PuzzleMove, EightPuzzle>> trio = new ActionStatePair(
								state, actionStatePair);
						linkToParent.add(trio);
					}

				}
			}
		}
	}

	public ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>> getPath(
			EightPuzzle initialState) {
		EightPuzzle parent = goalState;
		ActionStatePair<PuzzleMove, EightPuzzle> start = new ActionStatePair(
				linkToParent.get(linkToParent.size() - 1).getState()
						.getAction(), goalState);
		path.add(start);

		boolean checker = true;
		while (checker == true) {

			for (int i = linkToParent.size() - 1; i > 0; i--) {
				if (linkToParent.get(i).getState().getState().equals(parent)) {
					path.add(linkToParent.get(i).getState());
					// System.out.println(linkToParent.get(i).getState());
					parent = linkToParent.get(i).getAction();
				} else {
					checker = false;
				}
			}
		}

		Collections.reverse(path);

		return path;
	}

	public static void main(String[] args) {

		BFS_EightPuzzle myClass = new BFS_EightPuzzle();

		// declare start state
		EightPuzzle state = EightPuzzle.randomEightPuzzle();

		myClass.search(state);
		System.out
				.println("=============================== GOAL STATE REACHED; Making Moves! ===============================");
		System.out.println(state);
		System.out.println(myClass.getPath(state));
		System.out.println("Taking: " + myClass.path.size() + " steps");

	}

}
