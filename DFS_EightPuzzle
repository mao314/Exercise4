import java.util.ArrayList;
import java.util.Stack;

import rp13.search.problem.puzzle.EightPuzzle;
import rp13.search.problem.puzzle.EightPuzzle.PuzzleMove;
import rp13.search.util.ActionStatePair;

public class DFS_EightPuzzle {

	// declare goal state
	static EightPuzzle goalState = EightPuzzle.orderedEightPuzzle();

	// declare stack agenda
	static Stack<EightPuzzle> agenda = new Stack<EightPuzzle>();

	// declare explored states
	static ExploredStates<EightPuzzle> explored = new ExploredStates<EightPuzzle>();

	//declare path
	static ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>> path = new ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>>();
	
	public static void search(EightPuzzle currentState) {
		// declare successor function
		EightPuzzleSuccessorFunction function = new EightPuzzleSuccessorFunction();
		
		agenda.add(currentState);
		while (true) {
			EightPuzzle state = agenda.pop();
			System.out.println(state);
			explored.add(state);
					
			if (state.equals(goalState)) {
				break;
			} else {
				ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>> successors = new ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>>();

				// get successors
				function.getSuccessors(state, successors);
//				System.out.println(successors.size());
				// add successors to agenda
				for (ActionStatePair<PuzzleMove, EightPuzzle> actionStatePair : successors) {
					if (!explored.contains(actionStatePair.getState())
							&& !agenda.contains(actionStatePair.getState())) {
						agenda.push(actionStatePair.getState());
					}

				}
				for(int i = 0; i < successors.size(); i++){
					if(agenda.peek().equals( successors.get(i).getState() ) ) //saves the top of the stack --> the node to be explored
							path.add(successors.get(i));
				}
				
			}
		}
	}

	public static ArrayList<ActionStatePair<PuzzleMove, EightPuzzle>> getPath() {
		return path;
	}

	public static void main(String[] args) {
		// declare start state
		EightPuzzle state = EightPuzzle.randomEightPuzzle();

		search(state);
		System.out.println("=============================== GOAL STATE FOUND; Making Moves! ===============================");
		System.out.println(getPath());
		System.out.println("Taking: " + explored.size() + " steps");
	}

}
