
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import rp13.search.problem.puzzle.EightPuzzle;
import rp13.search.util.ActionStatePair;
import rp13.search.interfaces.SuccessorFunction;
import rp13.search.interfaces.Agenda;
import rp13.search.interfaces.GoalTest;
import unused.ExploredStates;

public class InformedSearch<Move, Puzzle> { 

	Puzzle goalState;
	SuccessorFunction<Move, Puzzle> succ;
	Agenda<Puzzle> agenda;

	
	public InformedSearch(Puzzle goalState,
			SuccessorFunction<Move, Puzzle> succ, Agenda<Puzzle> agenda) {

		super();
		this.goalState = goalState;
		this.agenda = agenda;
		this.succ = succ;
		
		
	}
	
	
	
	public void search(Puzzle state) {

		ExploredStates<Puzzle> explored = new ExploredStates<Puzzle>();
		ArrayList<Puzzle> allsuccessors = new ArrayList<Puzzle>();
		agenda.push(state);

		while (!agenda.isEmpty()) {
			state = agenda.pop();
			explored.add(state);
			
			if (goalState.equals(state)) {

				System.out.println("Goal State Found; Making Moves!");
				System.out.println(state);
				break;
				
			} 
			else {
				

				List<ActionStatePair<Move, Puzzle>> 
					successors = new ArrayList<ActionStatePair<Move, Puzzle>>();
				succ.getSuccessors(state, successors);

				for (ActionStatePair<Move, Puzzle> successor : successors) {
					if (!explored.contains(successor.getState())) {
						allsuccessors.add(successor.getState());

					}
				}

				//code here
				//sorting happening 
				
				
//				int count = 0;
//
//				for (int i = 0; i < allsuccessors.size() - 1; i++) {
//					Puzzle successor1 = allsuccessors.get(i);
//					//count = i;
//					for (int j = i + 1; j < allsuccessors.size(); j++) {
//						Puzzle successor2 = allsuccessors.get(j);
//						
//						if(successor1.Heuristic(goalState) > successor1.Heuristic(goalState) ){
//							
//						}
//						
//						
//						if (Heuristic(allsuccessors.get(j)) > Heuristic(allsuccessors
//								.get(count))) {
//							count = j;
//						}
//					}
//				}
//
//				System.out.println(count);
//				agenda.push(allsuccessors.get(count));
//				allsuccessors.remove(count);
//				Collections.sort(allsuccessors); //use nick's collection class for successor
			}

		}

	}


	

}
